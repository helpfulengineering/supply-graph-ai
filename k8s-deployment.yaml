# Kubernetes deployment for Open Matching Engine
# This example shows how to deploy OME to Kubernetes

apiVersion: v1
kind: Namespace
metadata:
  name: ome
---
apiVersion: v1
kind: Secret
metadata:
  name: ome-secrets
  namespace: ome
type: Opaque
stringData:
  api-keys: "prod-api-key-123,prod-api-key-456"
  anthropic-api-key: "your-anthropic-api-key"
  openai-api-key: "your-openai-api-key"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ome-config
  namespace: ome
data:
  API_HOST: "0.0.0.0"
  API_PORT: "8001"
  LOG_LEVEL: "INFO"
  DEBUG: "false"
  CORS_ORIGINS: "*"
  STORAGE_PROVIDER: "aws_s3"
  STORAGE_BUCKET_NAME: "ome-storage"
  LLM_ENABLED: "true"
  LLM_PROVIDER: "anthropic"
  LLM_MODEL: "claude-3-sonnet-20240229"
  LLM_QUALITY_LEVEL: "professional"
  GUNICORN_WORKERS: "4"
  GUNICORN_WORKER_CLASS: "gevent"
  GUNICORN_TIMEOUT: "120"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ome-api
  namespace: ome
  labels:
    app: ome-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ome-api
  template:
    metadata:
      labels:
        app: ome-api
    spec:
      containers:
      - name: ome-api
        image: open-matching-engine:latest
        ports:
        - containerPort: 8001
        env:
        - name: API_KEYS
          valueFrom:
            secretKeyRef:
              name: ome-secrets
              key: api-keys
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ome-secrets
              key: anthropic-api-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ome-secrets
              key: openai-api-key
        envFrom:
        - configMapRef:
            name: ome-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: storage
          mountPath: /app/storage
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: ome-storage-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: ome-logs-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ome-storage-pvc
  namespace: ome
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ome-logs-pvc
  namespace: ome
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: ome-api-service
  namespace: ome
  labels:
    app: ome-api
spec:
  selector:
    app: ome-api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8001
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ome-ingress
  namespace: ome
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - ome.yourdomain.com
    secretName: ome-tls
  rules:
  - host: ome.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ome-api-service
            port:
              number: 80
